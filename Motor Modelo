/**
 * main.c
 */

// El proposito de este programa es hacer una salida DAC (V0.1)

#include "F28x_Project.h"
#include "math.h"
// ****************************************************************************************
// ****************************** definiciones ********************************************
// ****************************************************************************************


#define SENO 1
#define SQUARE 2
#define BUFFER_SIZE 256
#define DIGITALONE  3071
#define DIGITALZERO 2047

#define MODEL_ZOH 1
#define MODEL_TUSTIN 2

#define b_ZOH {0.0, 0.00004507, 0.00004436}
#define a_ZOH {1.0, -1.953595, 0.954206}

#define b_T {0.00002236,0.00004472,0.00002236}
#define a_T {1.0, -1.953595, 0.954206}
// Defina el tipo de entrada que necesitará


// ****************************************************************************************
// ****************************** Definiciones con utilidad ******************************
// ****************************************************************************************
#define ENTRADA             SQUARE

#define USINGMODEL          MODEL_ZOH
#define a_SIS               a_ZOH
#define b_SIS               b_ZOH

//#define USINGMODEL          MODEL_TUSTIN
//#define a_SIS               a_T
//#define b_SIS               b_T
//#define FA 1000
//#define FM 10000
//#define SineBuffer FM/FA

// ****************************************************************************************
// ***************************** constructores ********************************************
// ****************************************************************************************
void ConfigureADC(void);
void ConfigureEPWM(void);
void SetupADCEpwm(Uint16 channel);
void Conf_DAC(void);

interrupt void ADC_int_fun(void);

//****************************************************************************************
//***************************** variables del programa ***********************************
//****************************************************************************************

//variables DACA
Uint16 load = 0;
Uint16 signal[ BUFFER_SIZE ];
Uint16 out[BUFFER_SIZE];
Uint16 i = 0;
float32 b_sis[3] = b_SIS;
float32 a_sis[3] = a_SIS;
//volatile float32 x[3]     = {DIGITALZERO,DIGITALZERO,DIGITALZERO};
//volatile float32 y[3]     = {DIGITALZERO,DIGITALZERO,DIGITALZERO};

float32 x[3]     = {0,0,0};
float32 y[3]     = {0,0,0};
//variables ADC
Uint16 AdcaResults[BUFFER_SIZE];
Uint16 resultsIndex;
volatile Uint16 bufferFull;


int main(void)
{

    // configurar la tarjeta con condiciones iniciales
    InitSysCtrl();
//  // debido a que no se utiliza nada se deshabilitan los perifericos para un menor consumo.
//    DisablePeripheralClocks();
//    // inicializar puertos como entrada con pull-up
    InitGpio();
    //Configurar DAC

    DINT;                   //deshabilitar interrupciones
    InitPieCtrl();          //deshabilitar INT. por perifericos

    IER = 0x0000;           //interrupt enable register
    IFR = 0x0000;           //interrupt flag register

    InitPieVectTable();

    EALLOW;
    PieVectTable.ADCA1_INT = &ADC_int_fun; //funcion a interrupcion
    EDIS;

    ConfigureADC();         // configurar ADC

    ConfigureEPWM();        // configurar EPWM

    SetupADCEpwm(0);        // sincronizar ADC y EPWM, CHANNEL

    Conf_DAC();             // Configurar DAC

    IER |= M_INT1;          // Habilitar grupo 1 de interrupciones INTy.1
    EINT;                   // Habilitar todas las interrupciones
    ERTM;                   // Habilitar interrupciones de itempo real DBGM

    PieCtrlRegs.PIEIER1.bit.INTx1 = 1;  //INT1.x

    //****************************************************************************************
    //********************** inicializacion de variables *************************************
    //****************************************************************************************

    for(resultsIndex = 0; resultsIndex < BUFFER_SIZE; resultsIndex++)
    {
        AdcaResults[resultsIndex] = DIGITALZERO;
        out[resultsIndex] = DIGITALZERO;
    }


    if(ENTRADA == SQUARE)
        for(i = 0; i < BUFFER_SIZE/2; i++){
            signal[i] = DIGITALONE;
            signal[i+BUFFER_SIZE/2] = DIGITALONE;
//            signal[i+BUFFER_SIZE/2] = 1427;
        }

    if(ENTRADA == SENO)
        for(i = 0; i < BUFFER_SIZE; i++)
            signal[i] = (Uint16)( 1023*sin( (4.0*3.1416*i/BUFFER_SIZE ) )  + DIGITALZERO);

    resultsIndex = 0;
    bufferFull = 0;
    i=0;
    //****************************************************************************************
    //********************** logica principal ************************************************
    //****************************************************************************************
    EALLOW;
    EPwm1Regs.ETSEL.bit.SOCAEN    = 1;  //Enable

    EDIS;



    while(1)
    {
        asm("   NOP");
    }
}


void Conf_DAC(void)
{
    //1. Enable the buffered DAC clock.
    //2. Set DACREF with DACREFSEL.
    //3. Power up the buffered DAC with DACOUTEN.
    //4. Wait for the power-up time to elapse before outputting a voltage. To determine the power-up time of
    //the buffered DAC, see the device-specific data manual. (10us)
    //5. For predictable behavior of the buffered DAC, consecutive writes to DACVALS should be spaced apart
    //according to the settling time of the buff.
    EALLOW;
    CpuSysRegs.PCLKCR16.bit.DAC_A = 1;          //habilitar clock de modulo DAC
    CpuSysRegs.PCLKCR16.bit.DAC_B = 1;          //habilitar clock de modulo DAC

    DELAY_US(15);                               //

    DacaRegs.DACCTL.bit.LOADMODE = 0;           // SYSCLK source
    DacaRegs.DACCTL.bit.DACREFSEL = 1;          //  ADC VREFHI/VSSA ó VDAC/VSSA**
    DacaRegs.DACOUTEN.bit.DACOUTEN = 1;         //encender modulo

    DacbRegs.DACCTL.bit.LOADMODE = 0;           // SYSCLK source
    DacbRegs.DACCTL.bit.DACREFSEL = 1;          //  ADC VREFHI/VSSA ó VDAC/VSSA**
    DacbRegs.DACOUTEN.bit.DACOUTEN = 1;         //encender modulo
    DELAY_US(15);                               //10 us en manual

    DacaRegs.DACVALS.all = DIGITALZERO;
    DacbRegs.DACVALS.all = DIGITALZERO;
    DELAY_US(2);
    EDIS;

}
void ConfigureADC(void)
{
    EALLOW;
    AdcaRegs.ADCCTL2.bit.PRESCALE = 6;      //set ADCCLK divider to /4
    AdcSetMode(ADC_ADCA, ADC_RESOLUTION_12BIT, ADC_SIGNALMODE_SINGLE);  // configurar ADC
    AdcaRegs.ADCCTL1.bit.INTPULSEPOS = 1;   // Set pulse positions to late
    AdcaRegs.ADCCTL1.bit.ADCPWDNZ = 1;      // turn on ADC
    DELAY_US(1000);                         // wait for on
    EDIS;
}

void ConfigureEPWM(void)
{
    InitEPwm1Gpio();

    EALLOW;
    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 0;


    CpuSysRegs.PCLKCR0.bit.GTBCLKSYNC = 1;              //time based count
    CpuSysRegs.PCLKCR0.bit.HRPWM = 1;                   //high rate pwm
    CpuSysRegs.PCLKCR2.bit.EPWM1 = 1;                   //clock pwm

    //TBPRD = (-CLKDIV*HSPCLKDIV + EPWMCLK*TPWM)/(CLKDIV*HSPCLKDIV)
    //EPWMCLK -> 50*10^6, HSPCLKDIV -> 8, CLKDIV -> 4, TPWM -> 1/64(15.6ms)
    EPwm1Regs.TBCTL.bit.CTRMODE     = TB_COUNT_UP;      // Tipo de contador
    EPwm1Regs.TBPRD                 = 24413;            // Periodo
    EPwm1Regs.CMPA.bit.CMPA         = 10000;            // Set compare A value to 2048 counts
    EPwm1Regs.TBCTR                 = 0x0000;           // Clear counter
    EPwm1Regs.TBCTL.bit.HSPCLKDIV   = 4;                // /8
    EPwm1Regs.TBCTL.bit.CLKDIV      = 2;                // /4

    EPwm1Regs.AQCTLA.bit.CAU = AQ_SET;                  // Set PWM1A on Zero
    EPwm1Regs.AQCTLA.bit.ZRO = AQ_CLEAR;                // Clear PWM1A on event A,

    EPwm1Regs.TBCTL.bit.FREE_SOFT = 3;                  // Free Run

    DELAY_US(10);

    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;

    EPwm1Regs.ETSEL.bit.SOCAEN    = 0;                // Disable SOC on A group
    EPwm1Regs.ETSEL.bit.SOCASEL   = 4;                // Select SOC on up-count
    EPwm1Regs.ETPS.bit.SOCAPRD    = 1;                // Generate pulse on 1st event

    EDIS;
}

void SetupADCEpwm(Uint16 channel)
{
    Uint16 acqps;

    //
    // Determine minimum acquisition window (in SYSCLKS) based on resolution
    //
    if(ADC_RESOLUTION_12BIT == AdcaRegs.ADCCTL2.bit.RESOLUTION)
    {
        acqps = 14; //75ns
    }
    else //resolution is 16-bit
    {
        acqps = 63; //320ns
    }

    //
    //Select the channels to convert and end of conversion flag
    //
    EALLOW;
    AdcaRegs.ADCSOC0CTL.bit.CHSEL = channel;  //SOC0 will convert pin
    AdcaRegs.ADCSOC0CTL.bit.ACQPS = acqps; //sample window is 100 SYSCLK cycles
    AdcaRegs.ADCSOC0CTL.bit.TRIGSEL = 5; //trigger on ePWM1 SOCA/C
    AdcaRegs.ADCINTSEL1N2.bit.INT1SEL = 0; //end of SOC0 will set INT1 flag
    AdcaRegs.ADCINTSEL1N2.bit.INT1E = 1;   //enable INT1 flag
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; //make sure INT1 flag is cleared
    EDIS;
}

interrupt void ADC_int_fun(void)
{

    if(load == 1){
        i = 0;
        resultsIndex = 0;       //para sincronizacion
        load = 2;
    }

    if(load == 2){
        DacaRegs.DACVALS.all = signal[i];
        DELAY_US(5);
    }

    AdcaResults[resultsIndex] = AdcaResultRegs.ADCRESULT0;

    y[2] = y[1];
    y[1] = y[0];
    x[2] = x[1];
    x[1] = x[0];

//    x[0] = ((float32)AdcaResults[resultsIndex] - 1427.0)/1334.0;

    x[0] = ((float32)AdcaResults[resultsIndex]-(float32)DIGITALZERO);

    y[0] =  x[0]*b_sis[0];
    y[0] =  x[1]*b_sis[1] + y[0];
    y[0] =  x[2]*b_sis[2] + y[0];
    y[0] =  y[0] - y[1]*a_sis[1];
    y[0] =  y[0] - y[2]*a_sis[2];
    y[0] =  y[0]/a_sis[0];

    out[i] = (Uint16)(y[0]+DIGITALZERO);
//    out[i] = (Uint16)((y[0]*1334.0) +1427.0);



    DacbRegs.DACVALS.all = out[i];

    resultsIndex++;
    i++;
    if(i >= BUFFER_SIZE)
    {
        i = 0;
    }


    if(resultsIndex >= BUFFER_SIZE )
    {
        resultsIndex = 0;
    }


    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; //clear INT1 flag

    //
    // Check if overflow has occurred
    //
    if(1 == AdcaRegs.ADCINTOVF.bit.ADCINT1)
    {
        AdcaRegs.ADCINTOVFCLR.bit.ADCINT1 = 1; //clear INT1 overflow flag
        AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; //clear INT1 flag
    }

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

