
// Realizar implemetacion de filtro

#include "F28x_Project.h"
#include "math.h"

    //**********************************************************************************************
    //********************************definiciones del programa*************************************
    //**********************************************************************************************
#define BUFFER              700
#define PI                  3.141592
#define acqps               14
    //**********************************************************************************************
    //**********************************prototipos del programa*************************************
    //**********************************************************************************************
    //inicio de DSP
    void InitDSP79D(void);

    // funciones para ADC
    void InitADCA(void);
    void InitPWM_ADCA(void);
    void IndexXn(void);
    interrupt void Sample_ADC(void);

    //funcion para filtrar
    void filtrar(void);
    //**********************************************************************************************
    //****************************************Variables********************************************
    //**********************************************************************************************

    //variables filtrado
    float32 xn[BUFFER];
    float32 yn[BUFFER];
    Uint16 n;
    float32 x0,x1,x2,y0,y1,y2;

    //variables ADC
    Uint16 n1 = 0;
    Uint16 adq_done = 0;
    Uint16 lock = 0;

    //variable para testigo
    Uint16 test = 0, test1 = 0;
    //**********************************************************************************************
    //******************************************MAIN************************************************
    //**********************************************************************************************
void main(void)
{

    //**********************************************************************************************
    //********************************incialzacion del sistema**************************************
    //**********************************************************************************************
    //inicio dsp
    InitDSP79D();
    //**********************************************************************************************
    //*********************************logica general de programa***********************************
    //**********************************************************************************************
    while(1){};
}


//**********************************************************************************************
//******************************Tratamiento interrupciones**************************************
//**********************************************************************************************
interrupt void Sample_ADC(void)
{
    if (lock == 0)
    {
        xn[0] = (float32)AdcaResultRegs.ADCRESULT0*3/4096;     //se guardan los datos
        if ( xn[0] >= 2.2 )
        {
            lock = 1;
        }
    }else{
        xn[ n1++ ] = (float32)AdcaResultRegs.ADCRESULT0*3/4096;     //se guardan los datos
        if(BUFFER <= n1)                                            //cuando ya esten todos los datos... se deshabilita el SOCA
        {
            n1 = 0;
            adq_done = 1;
            lock = 0;
            filtrar();
        }
    }
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;                      //limpiar bandera
    if(1 == AdcaRegs.ADCINTOVF.bit.ADCINT1)                     //si hay overflow se limpian banderas
    {
        AdcaRegs.ADCINTOVFCLR.bit.ADCINT1 = 1;                  //clear INT1 overflow flag
        AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;                  //clear INT1 flag
    }

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}
//**********************************************************************************************
//******************************funciones de programa*******************************************
//**********************************************************************************************
void InitDSP79D(void)
{
    // configurar la tarjeta con condiciones iniciales, el archivo de InitSysCtrl
    InitSysCtrl();

    DINT;                                   // deshabilitar interrupciones
    InitPieCtrl();                          // inicializar vector interrupciones
    IER = 0x0000;                           // se limpia Interrupt Enable Register
    IFR = 0x0000;                           // se limpia Interrupt Flag Registe
    InitPieVectTable();                     // Inicializar Perif. Interr.

    EALLOW;                                 // permiso para registro
    PieVectTable.ADCA1_INT = &Sample_ADC;   // dar direccion de tratamiento de int. ADC
    EDIS;                                   // quitar permiso para

    InitADCA();                             //Inicializar ADC
    InitPWM_ADCA();                         //inicializar pwm para SOC

    IER |= M_INT1;                          //hab. grupo 1 ADC

    EINT;                                   //hab. interrupciones
    ERTM;                                   //DBGM int.

    for(n = 0; n < BUFFER; n++)           //inicializacion de variables
    {
        yn[n] = 0.0;
        xn[n] = 0.0;
    }
    n1 = 0;
    n = 0;
    adq_done = 0;

    PieCtrlRegs.PIEIER1.bit.INTx1   = 1;      //habilitar interrupcion periferical ADC

    EALLOW;
    EPwm2Regs.TBCTR                 = 0x0000;               //inicializar en cero el contador.
    EPwm2Regs.ETSEL.bit.SOCAEN      = TB_ENABLE;            //Habilitar SOCA
    EDIS;
}
void InitADCA(void)
{
    EALLOW;
    AdcaRegs.ADCCTL2.bit.PRESCALE       = 6;                                    //dividir por /4 [sysclk = ( 200Meg Hz)]
    AdcSetMode(ADC_ADCA, ADC_RESOLUTION_12BIT, ADC_SIGNALMODE_SINGLE);          //configurar adc
                                                                                //configurado para el ADC_a, con resolucion de 12 bit's, entrada unica(tmbn puede ser diferencial)
    AdcaRegs.ADCCTL1.bit.INTPULSEPOS    = 1;                                    //ubicacion de la interrupcion
    AdcaRegs.ADCCTL1.bit.ADCPWDNZ       = 1;                                    //encender ADC
    DELAY_US(1000);                                                             //dar tiempo para inicializar
    AdcaRegs.ADCSOC0CTL.bit.CHSEL       = ADC_CHANNEL_0;                        //utilizar A0 y SOC0
    AdcaRegs.ADCSOC0CTL.bit.ACQPS       = acqps;                                //ventana de adquisicion 100 SYSCLK ciclos (74ns)
    AdcaRegs.ADCSOC0CTL.bit.TRIGSEL     = 7;                                    //disparo en ePWM1 SOCA/C
    AdcaRegs.ADCINTSEL1N2.bit.INT1SEL   = 0;                                    //EOC dspara interrupcion
    AdcaRegs.ADCINTSEL1N2.bit.INT1E     = 1;                                    //enable INT1 flag
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1   = 1;                                    //make sure INT1 flag is cleared
    EDIS;
}
void InitPWM_ADCA(void)
{
    EALLOW;
    CpuSysRegs.PCLKCR2.bit.EPWM2  = 1;              //encender modulo PWM
    EPwm2Regs.ETSEL.bit.SOCAEN    = 0;              // desh. SOC en grupo A
    EPwm2Regs.ETSEL.bit.SOCASEL   = ET_CTRU_CMPA;   // SOC en flanco de subida
    EPwm2Regs.ETPS.bit.SOCAPRD    = ET_1ST;         // pulso en primer evento
    EPwm2Regs.TBPRD               = 1000;          // 11816 [kHz]
    EPwm2Regs.CMPA.bit.CMPA       = EPwm2Regs.TBPRD/2;          // comparar a mitad de TBPRD
    EPwm2Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;        //clk div hi presition
    EPwm2Regs.TBCTL.bit.CLKDIV    = TB_DIV1;        //clk div
    EPwm2Regs.TBCTL.bit.CTRMODE   = TB_COUNT_UPDOWN;      //contar arriba y abajo
    EDIS;

}
void filtrar(void)
{
    test = 0;
    test1 = 0;
    //*****************************************************
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;

    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-144.796285)*y2 + 287.152676*y1 + x0 - x2;
        y0 /= 146.796285;
        y2 = y1;
        y1 = y0;
        yn[n] = y0*2;
        if(yn[n] >= (float)0.60)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 0;
    }
    //697
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;

    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-132.971)*y2 + 262.775*y1 + x0 - x2;
        y0 /= 134.871;
        y2 = y1;
        y1 = y0;
        yn[n] = 2*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 3;
    }
    //770
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;

    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-133.149)*y2 + 262.218*y1 + x0 - x2;
        y0 /= 135.149;
        y2 = y1;
        y1 = y0;
        yn[n] = 3*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 6;
    }
    //852
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;
    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-200.725)*y2 + 392.324*y1 + x0 - x2;
        y0 /= 202.725;
        y2 = y1;
        y1 = y0;
        yn[n] = 2*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 9;
    }
    //941
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;
    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-202.536)*y2 + 388.703*y1 + x0 - x2;
        y0 /= 204.536;
        y2 = y1;
        y1 = y0;
        yn[n] = 2*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 1;
    }
    //1209
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;
    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-203.551)*y2 + 386.673*y1 + x0 - x2;
        y0 /= 205.551;
        y2 = y1;
        y1 = y0;
        yn[n] = 2*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 2;
    }
    //1336
    //asm("   ESTOP0");
    //*****************************************************
    test = 0;
    x0 = 0;
    x1 = 0;
    x2 = 0;
    y0 = 0;
    y1 = 0;
    y2 = 0;
    for(n = 0; n < BUFFER; n++)
    {
        x2 = x1;
        x1 = x0;
        x0 = xn[n];
        y0 = (-204.797)*y2 + 384.18*y1 + x0 - x2;
        y0 /= 206.797;
        y2 = y1;
        y1 = y0;
        yn[n] = 2*y0;
        if(yn[n] >= 0.7)
        {
            test+=1;
        }
    }
    if(test > 10){
        test1 += 3;
    }
    //1477
    test = 0;
    //asm("   ESTOP0");
    if(test1 == 11){
        test1 = 0;
    }
}
